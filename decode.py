

base64code = "ewogImFjbnR5ZmlmZ3VtIjogewogICJkZW12Y2N0diI6IGZhbHNlLAogICJpcXByeXVqd3B0bmwiOiBbCiAgIHRydWUsCiAgICJxZ2NlcHExaXA4eTZ0bm9XbmNRMCIsCiAgIC0yMDUwNTQyNjA4LjMxNjQsCiAgICJXQ0RYRzAwNGZsVXZ3IiwKICAgWwogICAgZmFsc2UsCiAgICBbCiAgICAgZmFsc2UsCiAgICAgNTA1MzE1NDc0LAogICAgIDE0MjgxNzI2NzAsCiAgICAgZmFsc2UsCiAgICAgdHJ1ZSwKICAgICAiNldrZVdmcnFTZF8iLAogICAgIC0xOTI5MTc4MDU3LAogICAgICJ4eklFbzNSOWd0IgogICAgXSwKICAgIFsKICAgICAzOTQ3MjU4NTksCiAgICAgMjEzNDEzMDM1Mi4xNzI1MDk0LAogICAgIDEzODQ0OTk0ODMsCiAgICAgInIyNjQiLAogICAgIHRydWUsCiAgICAgImJtbGdoaVdkVTIiCiAgICBdLAogICAgWwogICAgIHRydWUsCiAgICAgInIxcWtuR08iLAogICAgICJ5VHhjRlhYIiwKICAgICB0cnVlLAogICAgIDEwODYzNjI5MzQsCiAgICAgLTE5NDQ4MTkxNzMsCiAgICAgMjA0MTIxNjk0OC4wNzE4ODc1CiAgICBdLAogICAgWwogICAgICJvdXdkeVhnOGRFMCIsCiAgICAgZmFsc2UsCiAgICAgZmFsc2UsCiAgICAgInBERWVTNGpVd2VUb1V1SSIsCiAgICAgIlhKRGs0N0YiLAogICAgIDc3OTYxNDc2NS45Mzk5NjE3LAogICAgIC0xNTAyNTEzOTgyLjY2NzE4MTUsCiAgICAgIjZRSGVtVUR3NCIsCiAgICAgdHJ1ZSwKICAgICAiVWw4MVR2a09hNldPOGtzIgogICAgXSwKICAgIC01Njk0NjAyNjgsCiAgICBbCiAgICAgdHJ1ZSwKICAgICAxMjUyNzI1MzYyLAogICAgIHRydWUsCiAgICAgdHJ1ZSw=CiAgICAgdHJ1ZSwKICAgICA4NTgzNjA1MTgsCiAgICAgdHJ1ZQogICAgXSwKICAgICI3ZHR2Q3lPIiwKICAgIHsKICAgICAibHF6aGRseGd2ZyI6IDEzOTY0NjQ1MTcuMzY2MzU3MywKICAgICAiamVwbHl6cGxsZyI6ICJsZGpoWkFwUmFBYjBnQ1liM0NfIiwKICAgICAiZ3RnZW5haG4iOiBmYWxzZSwKICAgICAiZHV5dmlpcWFqb2giOiB0cnVlCiAgICB9LAogICAgLTg0NzExNDY3MC44NTE4NDY1CiAgIF0sCiAgICJoZDJidDlmSUhOd1lmYVltYjdEIiwKICAgIkpscjJIIiwKICAgLTMzNjA5NDUxNiwKICAgewogICAgInZkcmRxamdqenEiOiB0cnVlLAogICAgImlncW1teGJkdWUiOiAtMTU2ODk1NDM3MC4yNDUzNzksCiAgICAiZGNtY2R3IjogMTU2Njg2MjU1NC41ODA1NTk3LAogICAgImtkeG52IjogMTQyMzU1NjM2NS44MDEzMzQ0LAogICAgInh4bmV2ZiI6IFsKICAgICAiWFc3MVJfS3pTIiwKICAgICAtMTE0NDk2MTgxNi40MDc4OTI3LAogICAgICJvNSIsCiAgICAgdHJ1ZQogICAgXSwKICAgICJ5bXpxcnphcnJ5dGoiOiB0cnVlLAogICAgImRieGR1dXgiOiAiTFdLNkxZZFlYUC0iLAogICAgImlzZXB5cCI6IDE2MDA0NjYxOTAsCiAgICAia3F4cmFldyI6IFsKICAgICAtMTgzODA2OTQyNSwKICAgICAiQ3psOFFjRkxmXyIsCiAgICAgZmFsc2UsCiAgICAgMTcwMDczNjU2NCwKICAgICA5ODA0ODE5ODgsCiAgICAgInoiLAogICAgICI3MnNyd0pNRE5GdGNlIiwKICAgICB0cnVlLAogICAgICJfYTg3IiwKICAgICBmYWxzZQogICAgXSwKICAgICJwd21heHhkb2ZoYnEiOiAiUkJ0RiIKICAgfSwKICAgdHI=dWUKICBdLAogICJlZnJvbSI6IFsKICAgWwogICAgdHJ1ZSwKICAgIC00MTUyNjc4NDgsCiAgICBmYWxzZSwKICAgIDk4NzYzOTA1MS43NjQyMDAxLAogICAgWwogICAgICItREhGcGUwNjJoWmxua0hHbm8iLAogICAgIDEwNjcyNzIyMDcuMzgyNDM2MywKICAgICAiZlh4IiwKICAgICAxMDUwNzU2MTEsCiAgICAgIjY4ZWlNMU9pM3ZSYXVZck9sIiwKICAgICBmYWxzZQogICAgXSwKICAgIFsKICAgICAiZFdIVW13IiwKICAgICAxODc1NTI2Mzc1LjExMjM4NzQsCiAgICAgMjc1Njk1NDM3Ljc3Mjg0MzQsCiAgICAgLTEyMzY2NzA1NzguNzkxNDQ2NywKICAgICAtODQzMTU5MTUsCiAgICAgLTE0NDM0MTA4NSwKICAgICAiMG4iCiAgICBdLAogICAgMTAwODk0MTAwOSwKICAgICJjUEVOTGctMyIsCiAgICB7CiAgICAgImN4Z3VvZWx0IjogMTg3MzAzMjQxOS44Njg0MTIsCiAgICAgImV3Z2Rrd3FtYnYiOiBmYWxzZSwKICAgICAidm5yYWRuZmJwcXoiOiAtMTg4ODU5NjA5NiwKICAgICAicmljc3J0cWtoIjogZmFsc2UsCiAgICAgImp0b2J1cndnIjogMzIwODk0NDMzLAogICAgICJtdXNtZnFhIjogImhBSC1RSEU2ZW1FUGtIIiwKICAgICAieXdieHJtbmJwaGZhIjogIlZuazNCblgzaTFuclFJR3B0eTUiLAogICAgICJ6c3B0aCI6IHRydWUsCiAgICAgImR3aHF6cXN5IjogLTI5MjM5OTQyNSwKICAgICAia2dnbWJjZnBleHFnIjogLTgzNTg2Mzk5CiAgICB9CiAgIF0sCiAgIC04ODE0MDgyNTUuNDMyNzc3OCwKICAgWwogICAgInlpd0V3ZDFYIiwKICAgIDg5Mjc4NTEzOSwKICAgIC0yMDYzODYwNTQ2LjUyNzUwNCw=CiAgICAtMTExNDIyMzc1NCwKICAgIFsKICAgICA1MTIzNDc1OCwKICAgICBmYWxzZSwKICAgICBmYWxzZSwKICAgICAiajVUQWciLAogICAgIGZhbHNlCiAgICBdLAogICAgWwogICAgIGZhbHNlLAogICAgIC0yNzQ2MjQwMSwKICAgICAiRG5sZ0ROcVA4aHRBOUxtajBpOCIsCiAgICAgLTEwNjQ1ODAxOTIsCiAgICAgLTY5MzIzMzg5Ni4yMzY2NjIzLAogICAgIHRydWUsCiAgICAgZmFsc2UsCiAgICAgInJCR1k4cGkiLAogICAgICItRSIsCiAgICAgNzgwOTc2NDc0Ljg4NzQyNzcKICAgIF0sCiAgICAxMTEwNjc0OTQ1CiAgIF0sCiAgIHsKICAgICJmdXNqc3FkYyI6IHsKICAgICAiZmxkd2FlIjogIndGSURHWG9lcjJIWmd4YSIsCiAgICAgInpvcndrIjogIklFQXNraTRUWCIsCiAgICAgImNrYW50aWZwaWljIjogLTMzOTgyMTg5OCwKICAgICAia2djcHRqaWZjIjogLTEyMjU2Nzk5MjYuMDcxNDkzNgogICAgfSwKICAgICJ1cGt4YnhmdGIiOiAtOTc1OTM2OTc2LjM0MjI5NjQsCiAgICAicXhtcGJkbWhhbiI6IHsKICAgICAibWN5ZXFqYWtjciI6IC0xODU0MDkzODg4LjA5ODg2MjQsCiAgICAgInd2bnNvenVxcCI6ICJSVFFZNFRRZFFsQV94WUcyMiIsCiAgICAgInR4cHp1Y28iOiA4MTQ0MjQ2MywKICAgICAiYnJ5a3hzeCI6IHRydWUsCiAgICAgInRxa2ZnIjogZmFsc2UsCiAgICAgInBrZnhncm4iOiAyMTE4ODA3NDA2CiAgICB9LAogICAgIm9kcnp2bmYiOiB7CiAgICAgImtja3hlbmh4IjogNTQxNzY5NTAxLjg5NTY0NjcKICAgIH0sCiAgICAiZGx6cGR5YyI6IDM0NzM3MjkyOCwKICAgICJ6YWV2ZHhxIjo=IFsKICAgICAid290cXZqIiwKICAgICAxNjcyMzUxNzcwLAogICAgIGZhbHNlCiAgICBdLAogICAgImxpZ2JxamNiangiOiBbCiAgICAgdHJ1ZSwKICAgICB0cnVlLAogICAgIHRydWUsCiAgICAgZmFsc2UsCiAgICAgdHJ1ZSwKICAgICAiTHQ4OUZ1czlsWTBlYTJ5VTFSVTEiLAogICAgICJJMHd2cHFhRGNzS1ZLIiwKICAgICB0cnVlCiAgICBdLAogICAgInJ4d3RrcHVqd2giOiB0cnVlLAogICAgInFwdmtjIjogZmFsc2UsCiAgICAic2Zqb3Z4YiI6IFsKICAgICBmYWxzZSwKICAgICAiUHIiLAogICAgIGZhbHNlLAogICAgIDEyODM2MTI0NDcsCiAgICAgZmFsc2UsCiAgICAgIjFHOHY3MWxkaFBBRGFFIiwKICAgICBmYWxzZSwKICAgICAyMDk0NzU1ODIyLjExNDUzMywKICAgICB0cnVlLAogICAgIDEwNzUzNDAxOTcuNDA3MjUxCiAgICBdCiAgIH0KICBdLAogICJxb3p6eGRhamwiOiB0cnVlLAogICJjdWhlYmxyIjogewogICAiemFmZnR1eHZmbHgiOiB7CiAgICAiemJvaGp3b2p4cSI6IGZhbHNlCiAgIH0sCiAgICJscXFncWJkd2twdSI6ICJZVl80SkIybGZTVklJdnJfNjUyaSIKICB9LAogICJwenFna2wiOiAiNlN3SnBoakVxa1poekNtcEhHTyIsCiAgImN3ZHRvdnhvbHNyIjogIlBIYUs0bEw5V1ZBOVVYT0VNTSIsCiAgImJrYmV1b3Fzdnp0eiI6IGZhbHNlLAogICJkc2Nwd3Rpaml6ZyI6IFsKICAgewogICAgInloZHN6aXRrbmMiOiBbCiAgICAgImwyVW8wLW9NIiwKICAgICAxMTM1MDQzMjE0Ljc5MTExOTMsCiAgICAgZmFsc2UsCiAgICAgdHJ1ZSwKICAgICBmYWxzZSwKICAgICAtMTQ1ODAyNDA5MCw=CiAgICAgLTEyMzY3NzE0OTUKICAgIF0sCiAgICAicXFwcWtnbHZsdmkiOiAiUXh0NENxNW5acEZjIiwKICAgICJ1d3VxbGdkaHd2ZHQiOiBbCiAgICAgIkpBdlJQZDE4SGNUZkNTaW5yIiwKICAgICBmYWxzZSwKICAgICBmYWxzZSwKICAgICAtMTU2NDA3NjA4NC45NTk4ODIzLAogICAgIC0xMjMxNDk4OTM2CiAgICBdLAogICAgInFvYXBycGRrZHp5IjogWwogICAgIDE1MjA4NDU5OTIuMzcwMzIwMwogICAgXSwKICAgICJsZ3VheCI6IHRydWUsCiAgICAieXp4dGFmcHJnamN6IjogOTU4MTQ2MTEsCiAgICAiY2dna25udG1peSI6IC04MjUzNzI4NDUuMzcxOTQxOSwKICAgICJ5bWJxd3lwIjogZmFsc2UsCiAgICAiZGFid3EiOiAicmhYUzFMUTFTIiwKICAgICJ3b25icCI6ICI4M2drdmRjLW1fUXRJczRRaVNQIgogICB9LAogICB7CiAgICAiYWdqb3FucG5xamF4IjogdHJ1ZQogICB9LAogICBbCiAgICB0cnVlLAogICAgZmFsc2UsCiAgICAtMTkyMDMxMjk3MywKICAgIC01MzI0MDg5NDMsCiAgICAtMTkyMjU5MjQ4MgogICBdLAogICB7CiAgICAicm5qdGh3aSI6IFsKICAgICBmYWxzZSwKICAgICAiSVJyVUVJWVBCLW9XT2Q3IiwKICAgICAiN0hIeFF2WVVzdk4zSzRZeWFSdVciLAogICAgIDkwMjg5MjYyMi4wNTk5Njc1LAogICAgICJXTDBta0dMUms2ZzAiLAogICAgIGZhbHNlLAogICAgIC0yNDk3MDU3OTYKICAgIF0sCiAgICAienR2cm9jciI6ICI0SDZLUjJ1amJSR24iLAogICAgImV6anRpenRycHB4YiI6IHsKICAgICAib2VwdGp3cGF1IjogImxsTmZkajJXZm4iLAogICAgICJibWZvcmZtZnBkaXMiOiA=IlFrUzJFcGVteng0c0JULTZweCIsCiAgICAgImtwYXpidm9pam4iOiAtMTM5ODA0NjE1MSwKICAgICAiY21rbW5ndHBma3pyIjogInRwaUN2NU5PZjNfZWJIZnoiCiAgICB9CiAgIH0sCiAgIC0yMTA4NjAyNzYxLAogICB7CiAgICAiZGVwcW1oYyI6IGZhbHNlLAogICAgInZ5dnl4biI6IHRydWUsCiAgICAidWl1YWdrd3R4IjogdHJ1ZQogICB9LAogICAtMzA2Mzg1OTkKICBdLAogICJjZHhuc2tqZXEiOiBbCiAgIC0xNjU2NTA5MTczLAogICAtMjMxNzQzNjYzLjU5MDMzMDAzLAogICBmYWxzZSwKICAgdHJ1ZSwKICAgWwogICAgWwogICAgIDc3ODI0MDEyNC42MTI3OTkyLAogICAgICJBRVpzdnlTLXZyNFVpb0VVciIsCiAgICAgLTIwMjQwMjQzMzYuNjA3OTcsCiAgICAgInFabXZwS1R6UU8zS1F1NXoiLAogICAgIHRydWUsCiAgICAgMTc3NjM0ODcwOSwKICAgICAieG5Ob1VVa1dDLUZXTFBxSXgiCiAgICBdLAogICAgLTEyMzYyNzQ1MTQuOTQyMTcwOSwKICAgIC0xNjU0MjI1NDUxLjIyMDM4ODcsCiAgICBbCiAgICAgdHJ1ZSwKICAgICBmYWxzZSwKICAgICAtNjg5NzQ0NDcsCiAgICAgImVLQyIKICAgIF0KICAgXSwKICAgewogICAgIml5cm1jb2RwcmlzIjogMjEzMTczMTI3NywKICAgICJmYXpobGRkZnlkdSI6IGZhbHNlCiAgIH0sCiAgICJjN2gtWmtXZnZLc29fZXI1NzNHIiwKICAgewogICAgImZxeHN2aiI6ICJRcTRGQUpVMl9EWWkiLAogICAgInRzd2toZyI6ICIzU1B4T0p2T28iLAogICAgImdyb3BtbyI6ICJZRDlPQjZQZHYiLAogICAgInlmcW90IjogLTI5NjcxNjc1OC4wMTA2MDQ2LAogICAgIms=aHh6eWYiOiAtNjc1MzE2NjM4LjM3MDQ5NjcsCiAgICAibXR6c2h6YXFtcm4iOiAyODExOTAzMDMsCiAgICAiaGp5Y2puYmtqeWEiOiB7CiAgICAgIm5oeHNzc2ciOiAiXzVOeFNaNUtEQk5seVFzIiwKICAgICAiYm9qZnJ0aSI6ICI0eUxHN0kiLAogICAgICJ6YW9rbXZ0b25mcyI6ICI1ajBpV19MLVp5MnNwTWUtV3EiCiAgICB9LAogICAgInRrbHhkbnpnYXJqIjogWwogICAgIGZhbHNlLAogICAgIDIyNTYzOTAzNy4wNjM1OTI2LAogICAgICJZT3RjaE0teHFaIiwKICAgICBmYWxzZSwKICAgICAtMzA3NDAyODY5LAogICAgICJaIiwKICAgICBmYWxzZSwKICAgICAxNTM1MTczMjI0LAogICAgIDE4OTE4MTk5MzguMDk3NjMxNywKICAgICAiTkF1V3VCZlJCWkNkUVhfWTFqSlMiCiAgICBdCiAgIH0KICBdCiB9LAogInFiYWNpc3dzaiI6ICJFc2tSUFItWTdKUFFkeHVLSDkwIiwKICJncXpvdiI6ICJaQWNwckFJdmZIQU5NeSIsCiAibm1ld2RvcWV6d2QiOiB0cnVlCn0="
import base64

def decode_base64(base64_string):
    decoded_bytes = base64.b64decode(base64_string)
    decoded_string = decoded_bytes.decode('utf-8')
    return decoded_string



# Assuming base64code is the variable containing the base64 encoded string
decoded_string = decode_base64(base64code)
print(decoded_string)
